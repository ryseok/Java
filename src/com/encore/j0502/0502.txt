<인터페이스>
형식)

    class 클래스명{
    
    } ----> 클래스명.java
    
    interface 인터페이스명{
       //필드
       //선언된 메소드만  ----> 바디없는 메소드  [public고정] void print();
    } ----> 인터페이스명.java

※ 인터페이스 사용은 ?  클래스에 구현해서 사용!!
  class My implements 인터페이스{
           ----------
                    구현의 약속
     public void print() ----> 오버라이딩!!(자식에서는 부모와 같은 접근제한자 또는 확장을 해야함!!)
     { ==>
     
     } ==> 구현했다!! 
  }
   
------------------------------------------
사용)
   인터페이스 Gildong,   구현클래스 My
   Gildong g; //인터페이스는 new를 사용하지 못함!!  new Gildong(); (X)   
           g = new My();           
           g.print();
           
<추상클래스>
- 자식클래스를 제어할 목적으로 사용.
형식)
   class A{
         정의,구현된 메소드만
         void hello(){}
   }  

   abstract class B{
        정의된 메소드
       void hello(){}
         선언된 메소드
       abstract void print(); //abstract생략 불가  
   }

   interface C{
         선언된 메소드만!!
         abstract void print(); //abstract생략 가능
   }
---------------------------------------------
※ 추상클래스의 사용?   자식클래스를 객체생성해서 사용!!
                     ----> 자식은 부모다!!

  추상클래스 Lime -추상메소드 print   ,  자식클래스 My
  
  class  My  extends  Lime{//부모가 갖는 print를 반드시 정의해라!!
      public void print(){
      
      }
  }                     
----------------------------------------------
   Lime lime = new Lime(); ---->에러: 추상클래스는 new 키워드 사용 불가!!
   
   Lime lime;
        lime = new My();
        
   My m = new My();
   
      lime.print();//부모를 통한 자식호출
      m.print();//직접호출
-------------------------------------------------------------------------------
<배열> Array
- 데이터 집합
형식)
     1.선언과 동시에 초기화
             자료형 배열명[] = {value_list};
        int su[]={1,2,3,4,5};
             
     2.배열객체생성
             자료형 배열명[]=new 자료형[방의크기];
        int su[]=  new int[5];
        ==> int [] su;
                   su = new int[5];
        ==> int su[]={0, 0, 0, 0, 0};                 
             //번지      [0][1][2][3][4]
             
        ==> 값의 할당  
            su[0]=10;
            su[2]=20;     
            ==>  {10, 0, 20, 0, 0}
            
===============================================================
    public void hello(Parent p){ // Parent p = new Child();
        p.print();
    }

    public void sort(Object ob){// Object ob = new String();
      1
      2
      3
    }
    public void sort(Object ob[]){// Object ob[] = str2;
    
    }
--------------------------------------------------------------
        
   호출:  Parent p = new Parent(); 
         hello(p);  또는  hello(new Parent());
         
        Child c = new Child();
         hello(c); 
         hello(new Child());  

        String str="안녕";
        sort(str);
         class String extends Object{
                              자식       is a    부모
         }


        String str2[]={"안녕","잘가"};
        sort(str2);

--------------------------------------------------------------
<2차원 배열>
   - 실제 저장은 1차원 배열과 같으나
          논리적으로 데이터를 행과 열의 형태로 저장한다고 생각.
   - 행사이즈는 반드시 기술해야함.
         열사이즈는 생략하는 것이 가능.
         
      int su[][];
      int [][]su;
      int []su[];
      
      int su[][] = new int[행크기][열크기];  
      int su[][] = new int[3][]; 
                     //3*2=6 : 6개의 데이터를 3행 2열의 형태로 저장.
           
            0     1  열  
        0   0     0
        1   0     0
        2   0     0        
              행            
            
       값 저장
      ==> su[1][0] = 10;
          su[2][1] = 20;
          su[0][1] = 30;      
           
            0     1  열  
        0   0    30
        1  10     0
        2   0    20        
              행            
           
<가변길이 열사용> - 각 행마다 서로 다른 열을 갖는 것이 가능
   int su[][] = new int[3][]; //열 사이즈를 생략
   
        행
    su[0] = new int[2]; //첫번째 행의 열사이즈를 지정
    su[1] = new int[3]; //두번째 행의 열사이즈를 지정
    su[2] = new int[4]; //세번째 행의 열사이즈를 지정

       행
    0 방 2개생성
    1 방 3개생성
    2 방 4개생성
               
                        행          0      1       2               
   int su[][] = { {1,2}, {3,4}, {5,6} };
                        열        0 1    0 1    0 1
                        
    su.length --->? 3 (행의 갯수와 일치)
       데이터 3을 출력하고 싶다?   System.out.println(su[1][0]);
       
       
    int su2[][] = {  {1},        {2,     3},    {4,      5,   6} };    
                   su2[0][0]    [1][0] [1][1]  [2][0] [2][1] [2][2]    

     su2.length  ----> 3 (전체행의 갯수)
     
     각 행의 데이터 수를 출력)
     su2[0] == su2첫번째 행을 표현!!
 
     su2[0].length  ----> 0행의 열(데이터)갯수 ----> 1
     su2[1].length  ----> 1행의 열(데이터)갯수 ----> 2
     su2[2].length  ----> 2행의 열(데이터)갯수 ----> 3

   2차원 배열내에 전체 데이터를 출력)
     for(int i=0; i<su2.length; i++){//기준!! ---> 행!!  i = 0, 1, 2
       for(int j=0; j<su2[i].length; j++){//열 표현
          System.out.println(su[i][j]);     
       }
     }  



            



            