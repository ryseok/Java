


<배열사용이유?>
---> 여러개의 데이터를 한 변수명으로 정의 ---> (인덱스)관리가 편해짐
---> 제약: 동일한 자료형, 고정된(수) 데이터만 입력!!

 <java.util.Vector>
  - 가변길이 배열
  - 객체에 대한 참조(주소)를 가지는 배열
  
  생성자)
    Vector() : 묵시적으로 10개의 방을 가진 Vector객체생성
    Vector(int size) : size지정된 크기의 Vector객체생성
    Vector(int size, int incr) : size크기의 Vector객체생성
                5         3  새로운 요소가 추가되어 크기가 늘어나야 할 경우 incr지정만클 늘어남.
                                 
 관련메소드)
    boolean hasMoreElements() : 요소가 있으면 true, 없으면 false리턴
    Object  nextElement()     : 다음 요소를 반환

==================================================================================
<Exception> 예외처리
- 프로그램 실행 중에 발생하는 예기치 않은 사건.
  (자바는 프로그램 실행 중 발생할 수 있는 예외를 처리할 수 있는 기법제공.
   발생하는 모든 예외를 객체로 취급, 예외관련 클래스를 제공)

예) 정수를 0으로 나누는 경우
    배열의 첨자가 음수값을 가지는 경우
    배열 첨자가 배열의 크기를 벗어나는 경우
    부적절한 형변환이 일어나는 경우
     int su = 3.14;  //에러
     
     int su = (int)3.14; //su변수에 3이 저장
     
     double d = 30;        //묵시적인 형변환!!  d변수에 30.0 이 저장.
     double d = (double)30; //명시적인 형변환!!
    
     (int)"홍길동"  (X)
     (B)A          (X)---> 만약 A클래스와 B클래스간에 상속관계가 없다.
    
     (Object)String  -----> Object ob = (Object)"길라임";
     ----> 부모캐스팅: 보통생략!!  Object ob = "길라임";
     
     ob.length()  ?  (X)
     ob.toString()  ? -----> String클래스의 toString()호출 
    
     (String)Object
     ----> 자식캐스팅       String str= (String)ob;
     str.length()  ? 3 (O)
     
     (Parent)Child     (Child)Parent ----> 상속관계에 있었을 때만 캐스팅이 가능.
    
    입출력시 인터럽트가 발생하는 경우
    입출력 위해 지정한 파일이 없거나 파일 이름이 틀린경우......
    
예외상황처리 ---> 자바언어를 더욱 강하게(robust) 만드는 요인!!    

 [기본예외상황처리기]
    
             프로그램
         |        
         | 실행           JVM : 예외발생시 관련된 예외클래스로 부터 예외 객체생성,        
         |                       프로그램에서 지정된 예외처리루틴에게 넘겨준다.
             예외발생
     
<Exception 클래스 계층구조>

                java.lang.Object
                           |
                java.lang.Throwable
                           |
               ------------------------
              |                        |
            Error                  Exception
          
 Error : 하드디스크 포맷이 망가진경우,  메모리파괴, 스택오버플로우
         (프로그램처리하지 않고 JVM에게 맡겨주는게 일반적임)  
---------------------------------------------------------------------
<예외처리 구문 형식> (try~catch문)

형식)
    
 try{
         예외가 발생할 가능성이 있는 문장;
    }catch(예외타입 변수명){//catch(변수선언)
            실제 예외가 발생시 처리할 문장;
    }finally{
           예외발생과 상관없이 반드시 실행할 문장;
    }

-------------------------------------------
메소드 정의(){

    문장1;
    문장2;
    문장3;
    ..... 

}

예외처리 case1) 각각 처리
    
   try{ 
       AException이 발생할 가능성이 있는 문장;
    }catch(AException ae){
       AException발생시 처리할 문장;
    }

   try{ 
       BException이 발생할 가능성이 있는 문장;
    }catch(BException be){
       BException발생시 처리할 문장;
    }

   try{ 
       CException이 발생할 가능성이 있는 문장;
    }catch(CException ae){
       CException발생시 처리할 문장;
    }
    
    
    
    
예외처리 case2) 다중catch를 사용   : 일반적으로 많이 사용


try{
    ParentException이 발생할 가능성이 있는 문장;
    ChildException이 발생할 가능성이 있는 문장;
    CException이 발생할 가능성이 있는 문장;
    
   }catch(ChildException ae){
       AException 발생시 처리할 문장;
    }catch(ParentException be){
       BException 발생시 처리할 문장;
    }catch(CException ce){
       CException 발생시 처리할 문장;
    }

※ 다중 catch사용시 주의할 점:
  만약 Exception들이 상속관계를 갖는다면 자식클래스부터 정의를 해야함!! 


public class FileReader{

   public FileReader(String fileName) throws FileNotFoundException{
   
   }

   public int read() throws IOException{
   
   }
}

==========================================================
<상속관계에서의 예외>
- 상위클래스의 throws 예외 는 하위클래스에서 같거나 축소되어야 함. (<=== 오버라이딩 규칙)
참고) 접근제한자의 경우 부모와 같거나 확대되어야 함. (<=== 오버라이딩 규칙)

class Parent{
   public void hello()throws AException, BException{   
   }
}

class Child extends Parent{
   public void hello()throws AException, BException {}   (O) 
   public void hello()throws AException{}                (O)
   public void hello()throws BException{}                (O)
   public void hello(){}                                 (O)
   
   public void hello()throws AException, BException, CException {}  (X)
   public void hello()throws CException {}  (X)
   public void hello()throws Exception {}  (X)
      
}
















    
    
    



    