



<mission>
- com.encore.j0615.view.JoinForm 
   ----> joinForm.html 문서로 회원가입폼을 브라우저에 출력하시오.
   

<자바스크립트>   
 ---> HTML문서(정적페이지) -----> JavaScript적용(동적페이지)
 ---> HTML문서를 통해 입력된 데이터를 얻어오고
          데이터에 대한 유효성 검사를 할 때 사용.
 ---> HTML문서에 대한 조작(태그,속성,스타일)!!★
 
<<JavaScript와 Java 비교>>

1. JavaScript: 클라이언트 스크립트 (브라우저에서 실행!!) 
   JSP(Java) : 서버 스크립트         (JVM에서 실행!!)
   
2. JavaScript의 위치
   ---> HTML문서내에 포함되어서 실행.
       (HTML문서내의 어떤 위치라도 정의 가능)
       
       
   <html>
     <head>
	   <script>
	         프로그램영역!!
	     ----> 변수선언, 함수(function)정의    
	   </script>    
     </head>
    ------------------------------------- 
     <body>
       <script>
	         프로그램영역!!
	     ----> 함수 호출    
	   </script>    
     </body>
   </html>          

3. 자료형을 선언, 정의하지 않는다!! ★
  
    자바case)
       String name="홍길동";    
              name="길라임";
              name=10;     (X)

    자바스크립트case)
       String name="홍길동"; (X)    
              name="홍길동"; (O)    

       var su;  ----> 변수선언
           su=10;          ----> number타입
           su="김주원";      ----> String타입  //대입되는 데이터에 따라 자료형이 변환됨
           su=true;        ----> boolean타입
           su= new Date(); ----> Date타입
 
4. 자바스크립트에서의 문자열 표현
  ---> 작은 따옴표와 큰 따옴표를 구분 없이 사용!!
         ----> 전혀 차이가 없음.

     name1 = "홍길동";  (O)
     name2 = '길라임';  (O)
     name3 = "김주원';  (X)

5. 자바스크립트는 구분자, 종결자 역할을 하는 ';'을 생략하는 것이 가능.
   ===> 이유: 라인(줄바꿈)을 통해 서로 다른 문장을 구분하기 때문.

   name='길동'
   age=13
   ==> (O)
   
   name="라임" age=15
   ==> (X)
   
   name="주원"; age=17
   ==> (O)
 
6. 자바스크립트  /(몫), %(나머지)
   
   10/5 ---> 2
   10%5 ---> 0
   
   10/3 ---> 3.33333333
           parseInt(3.33333333) ---> 3
           
   10%3 ---> 1
   
7. JavaScript내의 주석
  - Java와 동일
  - //설명문   :라인주석   
    /*
          설명문1
          설명문 2
     */      :블럭주석
     
  - HTML주석은 <script>태그를 인식하지 못하는 브라우저를 위해 정의!!
  
  <!--
     document.write('안녕~!!');
   -->
    
8. 문자열 비교
   자바case)
       "java".equals("JAVA")    ==> (O) 문자열 내용비교
       "java" == "JAVA"         ==> (O) 메모리 주소 비교
       
  자바스크립트case)     
   "javascript".equals("JAVASCRIPT") ==> (X) 에러발생
                                     ==> equals() X
                                     
   "javascript" == "JAVASCRIPT" ==> (O) 문자열 내용 비교
     
     
9. '==' 연산자와 '===' 연산자 (엄격한 비교연산자)
   
   100 == '100'   앞뒤 데이터를 같은지 비교하는데
                                내용만 같다면 자동형변환을 해서 비교!!
                                
   100 === '100'  첫번째) 자료형 비교
                                 두번째) 내용 비교                               
                                
   !=  -----> !== (엄격한 비교연산자)                                

10. 조건문

  if(조건식){
        조건식 결과가 참일 때 실행할 문장;
   }
   ----> 실행할 문장이 한개였을때 영역괄호{}는 생략 가능!!
   
   
   if(조건식){
        조건식 결과가 참일 때 실행할 문장;
   }else{
      조건식 결과가 거짓일 때 실행할 문장;
   }
   
   
   if(조건식1){
        조건식1 결과가 참일 때 실행할 문장;
   }else if(조건식2){
        조건식1 결과가 거짓이고!!
        조건식2 결과가 참일 때 실행할 문장;
   }else{
        조건식1,2 결과가 거짓일 때 실행할 문장;
   }
   
  ※ 차이점
   if(조건식 ===> boolean, 숫자, 객체){
   
   }
   
   
   숫자: 0인 수(false), 0아닌 수(true)로 구분.
   객체: 브라우저에서 지원되는 객체인지 아닌지 판별.
      ---> 변수에 값이 존재하는지 판단.
      
  존재하는 객체(문자열, 브라우저가 지원하는 객체) ---> true
 null, undefined                      ---> false      
        ---> 초기화되는 않은 변수
   
11. 빈문자열 체크
    
    1) str.length == 0     //자바스크립트의 문자열 길이 구하기 : str.length 사용 
                           //str.length() ==> 에러: length()메소드 지원 X     
    2) str == ''   
    
     ===> 2)번을 많이 사용
     
       참고)  str.equals('') ==> 에러 발생: (equals()메소드 제공X)
       
       
12. 함수(메소드) 정의!! ★★

    함수형식)
     function 함수명(){
     
     } ----> return;
     
     function 함수명(변수명1, 변수명2){
       return "리턴데이터";
     }
     
     자바)
      void     hello(String name, int age){  }
     자바스크립트)   
      function hello(name,age){}

     ※주의 : 자바스크립트의 함수는 오버로딩을 제공할까요?
         ---> 기본적으로 제공X


      function hello(){
                    안녕!!
      }

      hello(); 호출  ----> 안녕!!
      
      function hello(){
                    씬짜오!!
      }
      ===> 에러가 발생하지 않는다!! 

      hello(); 호출  ----> 씬짜오!!

      function hello(name){
                    봉쥬르!!
      }
      ===> 에러가 발생하지 않는다!!
      
      hello(); 호출                     ---> 봉쥬르!! 
      hello('나길동'); 호출         ---> 봉쥬르!! 
      hello('나길동',13); 호출    ---> 봉쥬르!! 
      ===> 함수호출시 매개변수와 상관없이 함수명만 일치하면 호출 가능!!
      ===> 같은영역(파일)에 동일한 이름의 함수가 여러개 존재한다면(매개변수의 갯수는 상관없이)
                       아래에 있는 함수로 overwrite됨!!
      
13. HTML태그내의 속성 중 on접두사를 갖는 속성은 이벤트 속성. (~ 했을때)
  예) <input type='button' value='버튼' onclick="자바스크립트 코드">
                                              ===> 주로 함수 호출
                                     ===> 버튼을 클릭했을때
     onfocus : 포커스가 들어왔을때                                              
     onblur : 포커스를 잃었을때
     onchange : select태그에서 선택을 바꾸었을때
     onkeydown : 키보드를 눌렀을때
     onkeyup   : 키보드 땠을때
     onmouseover   : 마우스가 진입했을때, 엘리먼트위에 올려졌을때 
     onmouseout    : 마우스가 나갔을때
     onmousedown   : 마우스를 클릭했을때          





 
 
 
 




